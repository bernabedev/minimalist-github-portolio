---
import Card from './ui/card/card.astro'
---

<div>
  <button
    id='open-chat-btn'
    class='fixed bottom-4 right-4 rounded-full bg-blue-600 p-2 transition hover:scale-110'
  >
    <svg
      xmlns='http://www.w3.org/2000/svg'
      width='28'
      height='28'
      viewBox='0 0 24 24'
      fill='none'
      stroke='currentColor'
      stroke-width='2'
      stroke-linecap='round'
      stroke-linejoin='round'
      class='text-white'
    >
      <path d='M12 8V4H8'></path><rect
        width='16'
        height='12'
        x='4'
        y='8'
        rx='2'
      >
      </rect><path d='M2 14h2M20 14h2M15 13v2M9 13v2'></path></svg
    >
  </button>
  <Card
    id='chat-bot'
    class:list={[
      'fixed bottom-4 right-4 z-10 hidden min-h-[570px] w-96 flex-col overflow-hidden rounded-xl border border-black dark:!bg-[#080915]'
    ]}
  >
    <div class='flex items-center gap-2 bg-muted-foreground/5 px-6 py-4'>
      <h1 class='font-semibold'>Chat Assistant</h1>
      <button
        id='chat-clear-btn'
        class='ml-auto rounded-md px-4 py-1 hover:bg-primary/10'
      >
        Clear
      </button>
      <button class='p-1' id='chat-close-btn'>
        <svg
          xmlns='http://www.w3.org/2000/svg'
          width='20'
          height='20'
          viewBox='0 0 24 24'
          fill='none'
          stroke='currentColor'
          stroke-width='1.5'
          stroke-linecap='round'
          stroke-linejoin='round'
        >
          <path d='M18 6 6 18M6 6l12 12'></path>
        </svg>
      </button>
    </div>
    <div id='chat-placeholder' class='flex flex-1 items-center justify-center'>
      <div class='rounded-md bg-muted-foreground/5 p-4'>
        Chat with the AI assistant
      </div>
    </div>
    <div
      id='chat-messages'
      class='hidden max-h-[500px] flex-1 overflow-y-auto p-4'
    >
    </div>
    <div class='px-6 py-4'>
      <div class='relative'>
        <input
          class='min-h-12 w-full rounded-full border bg-[transparent] pe-12 pl-4 dark:border-white/10'
          placeholder='Ask a question...'
        />
        <button
          id='chat-send-btn'
          class='absolute right-2 top-1/2 -translate-y-1/2 transform rounded-full bg-blue-600 p-2 text-white'
        >
          <svg
            xmlns='http://www.w3.org/2000/svg'
            width='20'
            height='20'
            viewBox='0 0 24 24'
            fill='none'
            stroke='currentColor'
            stroke-width='2'
            stroke-linecap='round'
            stroke-linejoin='round'
          >
            <path d='m5 12 7-7 7 7M12 19V5'></path>
          </svg>
        </button>
      </div>
    </div>
  </Card>
</div>

<script>
  import type { ChatBotMessage } from 'src/definitions'
  import { streamGeminiResponse } from 'src/services/gemini'

  const messages: ChatBotMessage[] = []

  const $openBtn = document.getElementById('open-chat-btn')
  const $card = document.getElementById('chat-bot')
  const $closeBtn = document.getElementById('chat-close-btn')
  const $sendBtn = document.getElementById('chat-send-btn')
  const $messages = document.getElementById('chat-messages')
  const $input = document.querySelector('input')
  const $placeholder = document.getElementById('chat-placeholder')
  const $clearBtn = document.getElementById('chat-clear-btn')

  $openBtn?.addEventListener('click', () => {
    $card?.classList.remove('hidden')
    $card?.classList.add('flex')
  })

  $closeBtn?.addEventListener('click', () => {
    $card?.classList.remove('flex')
    $card?.classList.add('hidden')
  })

  $clearBtn?.addEventListener('click', () => {
    messages.length = 0
    initializeMessages()
  })

  function sendMessage(msg: string) {
    messages.push({ role: 'user', content: msg })
    if ($input) $input.value = ''

    $messages?.classList.remove('hidden')
    $placeholder?.classList.add('hidden')

    let ul = $messages?.querySelector('ul')

    // Si no existe un ul dentro de $messages, lo creamos
    if (!ul) {
      ul = document.createElement('ul')
      ul.classList.add('flex', 'flex-col', 'gap-4')
      $messages?.appendChild(ul)
    }

    const li = document.createElement('li')
    li.classList.add(
      'flex',
      'flex-col',
      'gap-2',
      'rounded-2xl',
      'bg-blue-500',
      'px-4',
      'py-2',
      'w-fit',
      'self-end',
      'text-white',
      'text-sm'
    )

    const p = document.createElement('p')
    p.textContent = msg
    li.appendChild(p)
    ul.appendChild(li)

    if ($messages) {
      setTimeout(() => {
        $messages.scrollTop = $messages.scrollHeight
      }, 50) // Small delay to ensure UI updates first
    }
  }

  $sendBtn?.addEventListener('click', () => {
    const message = $input?.value
    if (message) {
      sendMessage(message)
      streamGeminiResponse(message)
    }
  })

  $input?.addEventListener('keydown', (e) => {
    if (e.key === 'Enter') {
      const message = $input?.value
      if (message) {
        sendMessage(message)
        streamGeminiResponse(message)
      }
    }
  })

  function initializeMessages() {
    if (messages.length === 0) {
      $messages?.querySelector('ul')?.remove()
      $messages?.classList.add('hidden')
      $placeholder?.classList.remove('hidden')
      return
    }

    $messages?.classList.remove('hidden')
    $placeholder?.classList.add('hidden')

    let ul = $messages?.querySelector('ul')

    // Si no existe un ul dentro de $messages, lo creamos
    if (!ul) {
      ul = document.createElement('ul')
      ul.classList.add('flex', 'flex-col', 'gap-4')
      $messages?.appendChild(ul)
    }

    // Limpiamos el ul antes de agregar los mensajes
    ul.innerHTML = ''

    messages.forEach(({ role, content }) => {
      const li = document.createElement('li')
      li.classList.add(
        'flex',
        'flex-col',
        'gap-2',
        'rounded-2xl',
        'px-4',
        'py-2',
        'w-fit',
        'text-sm'
      )

      if (role === 'user') {
        li.classList.add('bg-blue-500', 'self-end', 'text-white')
      } else {
        li.classList.add(
          'dark:bg-white',
          'bg-primary',
          'self-start',
          'dark:text-black',
          'text-white'
        )
      }

      const p = document.createElement('p')
      p.textContent = content
      li.appendChild(p)
      ul.appendChild(li)
    })
  }
  initializeMessages()
</script>
